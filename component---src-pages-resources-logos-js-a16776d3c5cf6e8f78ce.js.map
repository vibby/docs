{"version":3,"sources":["webpack:///./src/components/common/Grid.js","webpack:///./src/components/common/Button.js","webpack:///./src/components/community/LogoCard.js","webpack:///./src/pages/resources/logos.js"],"names":["Grid","left","children","className","classnames","defaultProps","GridItem","padding","limitWidth","full","autosize","auto","ButtonContent","icon","text","Button","empty","link","onClick","download","href","classNames","substring","to","target","rel","type","LogoCard","logo","useState","types","length","selectedType","setSelectedType","formats","selectedFormat","setSelectedFormat","imageToDownload","useMemo","src","thumbnail","alt","name","withFormat","map","onTypeClickHandler","active","format","onFormatClickHandler","query","Wallpapers","location","data","allLogos","svg","nodes","publicURL","createTypeDataFromPng","logoPng","medium","Object","keys","filter","key","png","existingLogo","find","l","push","small","Layout","title"],"mappings":"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","file":"component---src-pages-resources-logos-js-a16776d3c5cf6e8f78ce.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nexport const Grid = ({ left, children, className }) => (\n  <div className={classnames(className, 'grid__container', { left })}>{children}</div>\n);\n\nGrid.propTypes = {\n  left: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n};\n\nGrid.defaultProps = {\n  left: false,\n  className: '',\n};\n\nexport const GridItem = ({ className, padding, limitWidth, full, children, autosize }) => (\n  <div\n    className={classnames(className, 'grid__item', {\n      [`p-${padding}`]: padding,\n      'no-min': !limitWidth,\n      auto: autosize,\n      full,\n    })}\n  >\n    {children}\n  </div>\n);\n\nGridItem.propTypes = {\n  full: PropTypes.bool,\n  padding: PropTypes.number,\n  limitWidth: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  autosize: PropTypes.bool,\n};\n\nGridItem.defaultProps = {\n  full: false,\n  limitWidth: true,\n  padding: null,\n  className: '',\n  autosize: false,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Link } from 'gatsby';\n\nconst ButtonContent = ({ icon, text }) => (\n  <div className=\"button__content\">\n    {icon && <span className={`icon-${icon}`} />}\n    {text && <span>{text}</span>}\n  </div>\n);\n\nconst Button = ({ className, empty, icon, link, onClick, text, download }) => {\n  if (download) {\n    return (\n      <a href={link} download className={classNames('btn', className, { empty })}>\n        <ButtonContent icon={icon} text={text} />\n      </a>\n    );\n  }\n  if (!link) {\n    return (\n      <button type=\"button\" className={classNames('btn', className, { empty })} onClick={onClick}>\n        <ButtonContent icon={icon} text={text} />\n      </button>\n    );\n  }\n  if ('/' === link.substring(0, 1)) {\n    return (\n      <Link to={link} className={classNames('btn', className, { empty })}>\n        <ButtonContent icon={icon} text={text} />\n      </Link>\n    );\n  }\n  return (\n    <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" className={classNames('btn', className, { empty })}>\n      <ButtonContent icon={icon} text={text} />\n    </a>\n  );\n};\n\nButtonContent.propTypes = {\n  icon: PropTypes.string,\n  text: PropTypes.string,\n};\n\nButtonContent.defaultProps = {\n  icon: null,\n  text: null,\n};\n\nButton.propTypes = {\n  className: PropTypes.string,\n  empty: PropTypes.bool,\n  icon: PropTypes.string,\n  link: PropTypes.string,\n  onClick: PropTypes.func,\n  text: PropTypes.string,\n  download: PropTypes.bool,\n};\n\nButton.defaultProps = {\n  className: 'btn',\n  empty: false,\n  icon: null,\n  link: null,\n  onClick: null,\n  text: null,\n  download: false,\n};\n\nexport default Button;\n","import React, { useState, useMemo } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport Button from '../common/Button';\n\nconst LogoCard = ({ logo }) => {\n  const [selectedType, setSelectedType] = useState(logo.types.length && logo.types[0]);\n  const [selectedFormat, setSelectedFormat] = useState(selectedType.formats[0]);\n\n  const imageToDownload = useMemo(() => selectedFormat.src, [selectedFormat]);\n\n  const onTypeClickHandler = (type) => {\n    setSelectedType(type);\n    setSelectedFormat(type.formats[0]);\n  };\n\n  const onFormatClickHandler = (format) => setSelectedFormat(format);\n\n  return (\n    <div className=\"logo__card card nopadding clickable\">\n      <div className=\"logo__checkerboard\">\n        <img src={logo.thumbnail} alt={logo.name} />\n      </div>\n      <div className=\"card__bottom\">\n        <div\n          className={classNames('logo__options', {\n            withFormat: 1 < selectedType.formats.length,\n          })}\n        >\n          <div className=\"logo__types\">\n            {logo.types.map((type) => (\n              <button\n                onClick={() => onTypeClickHandler(type)}\n                className={classNames('logo__type', {\n                  active: selectedType && selectedType.type === type.type,\n                })}\n                type=\"button\"\n              >\n                {type.type}\n              </button>\n            ))}\n          </div>\n          <div className=\"logo__formats\">\n            {1 < selectedType.formats.length &&\n              selectedType.formats.map((format) => (\n                <button\n                  onClick={() => onFormatClickHandler(format)}\n                  className={classNames('logo__format', {\n                    active: selectedFormat && selectedFormat.name === format.name,\n                  })}\n                  type=\"button\"\n                >\n                  {format.name}\n                </button>\n              ))}\n          </div>\n        </div>\n        <Button icon=\"download\" className=\"logo__button small\" link={imageToDownload} download />\n      </div>\n    </div>\n  );\n};\n\nLogoCard.propTypes = {\n  logo: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    thumbnail: PropTypes.string.isRequired,\n    types: PropTypes.arrayOf(\n      PropTypes.shape({\n        type: PropTypes.string,\n        formats: PropTypes.arrayOf(\n          PropTypes.shape({\n            name: PropTypes.string,\n            src: PropTypes.string,\n          })\n        ),\n      })\n    ),\n  }).isRequired,\n};\n\nexport default LogoCard;\n","import React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport Layout from '../../components/Layout';\nimport { Grid, GridItem } from '../../components/common/Grid';\nimport LogoCard from '../../components/community/LogoCard';\n\nconst Wallpapers = ({ location, data }) => {\n  const allLogos = data.svg.nodes.map((logo) => ({\n    name: logo.name,\n    thumbnail: logo.publicURL,\n    types: [\n      {\n        type: 'svg',\n        formats: [\n          {\n            name: 'default',\n            src: logo.publicURL,\n          },\n        ],\n      },\n    ],\n  }));\n  const createTypeDataFromPng = (logoPng) => ({\n    type: 'png',\n    src: logoPng.formats.medium.src,\n    formats: Object.keys(logoPng.formats)\n      .filter((key) => logoPng.formats[key].src)\n      .map((key) => ({\n        name: key,\n        src: logoPng.formats[key].src,\n      })),\n  });\n  data.png.nodes.map((logo) => {\n    const existingLogo = allLogos.find((l) => l.name === logo.name);\n    if (existingLogo) return existingLogo.types.push(createTypeDataFromPng(logo));\n    return allLogos.push({\n      name: logo.name,\n      thumbnail: logo.formats.small.src,\n      types: [createTypeDataFromPng(logo)],\n    });\n  });\n\n  return (\n    <Layout location={location}>\n      <div className=\"logos\">\n        <Helmet title=\"Logos\" />\n        <header className=\"page__header-overlaid bg-blue\">\n          <div className=\"container\">\n            <h1 className=\"page__title color-white\">\n              Identity and <strong>logos</strong>\n            </h1>\n            <p className=\"h4-like color-white\">\n              Before using the API Platform logos, read our{' '}\n              <Link className=\"color-white\" to=\"/trademark-policy\">\n                Trademark and Logo Policy\n              </Link>\n              .\n            </p>\n          </div>\n        </header>\n        <section className=\"container\">\n          <Grid className=\"logo__grid\">\n            {allLogos.map((logo) => (\n              <GridItem padding={10}>\n                <LogoCard logo={logo} />\n              </GridItem>\n            ))}\n          </Grid>\n        </section>\n      </div>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query {\n    svg: allFile(\n      filter: { sourceInstanceName: { eq: \"logos\" }, ext: { eq: \".svg\" } }\n      sort: { fields: name, order: ASC }\n    ) {\n      nodes {\n        name\n        ext\n        publicURL\n      }\n    }\n    png: allFile(\n      filter: { sourceInstanceName: { eq: \"logos\" }, ext: { eq: \".png\" } }\n      sort: { fields: name, order: ASC }\n    ) {\n      nodes {\n        name\n        ext\n        publicURL\n        formats: childImageSharp {\n          large: resize(width: 1200) {\n            src\n          }\n          medium: resize(width: 600) {\n            src\n          }\n          small: resize(width: 300) {\n            src\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst formatType = PropTypes.shape({\n  src: PropTypes.string,\n});\n\nWallpapers.propTypes = {\n  data: PropTypes.shape({\n    svg: PropTypes.shape({\n      nodes: PropTypes.arrayOf(\n        PropTypes.shape({\n          name: PropTypes.string,\n          ext: PropTypes.string,\n          publicURL: PropTypes.string,\n        })\n      ),\n    }),\n    png: PropTypes.shape({\n      nodes: PropTypes.arrayOf(\n        PropTypes.shape({\n          name: PropTypes.string,\n          ext: PropTypes.string,\n          formats: PropTypes.shape({\n            small: formatType,\n            medium: formatType,\n            large: formatType,\n          }),\n        })\n      ),\n    }),\n  }).isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nexport default Wallpapers;\n"],"sourceRoot":""}